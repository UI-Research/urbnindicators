[{"path":"https://ui-research.github.io/urbnindicators/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 urbnindicators authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ui-research.github.io/urbnindicators/articles/urbnindicators.html","id":"the-existing-tidycensus-workflow","dir":"Articles","previous_headings":"","what":"The Existing tidycensus Workflow","title":"urbnindicators","text":"tidycensus provides suite functions working select datasets available via Census Bureau’s API (application programming interface) backbone data produced urbnindicators. tidycensus API versatile allows users access many datasets (variables within datasets) urbnindicators, can require significant amount knowledge effort use tidycensus support robust analysis process, many users may fall common pitfalls without realizing ’ve made error(s). tidycensus workflow might follow steps . First, need identify names variables ’re interested . want look share population disability, county level, New Jersey. load variable index corresponding data year look variables “Disability” concept field: ’re working RStudio, can filter codebook via point--click interface, , can programatically, subsetting ~28,000 available variables ~500 match term “Disability”. However, 500 variables orders magnitude greater number variables actually want (read: 2): number people disability number people. variable(s) select? ’s clear answer. variables relating disability reflect disability least one characteristic (e.g., “sex age disability status”). want calculate percent individuals disability, want using robust available variables (.e., reflect individuals reported disability status), whereas variables reflect disability may smaller counts characteristics combined disability status (e.g., health insurance coverage status, case “Age Disability Status Health Insurance Coverage Status”) may available subset individuals disability status available. Putting challenges aside, let’s imagine select table variables prefixed “B18101”, “Sex Age Disability”. think respondents asked disability status also asked sex age. pass tidycensus : returns us 21 observations (one county NJ) along intimidating 80 columns. Now need figure aggregate needed variables denominator numerator order calculate valid “% Disabled” measure, task feasible time-intensive error-prone (small part variable named alphanumeric code rather meaningful descriptive name). analysis leverages single measure, especially measures required distinct tables, workflow burdensome exposes significant surface area undetected errors. time, many analysts overwhelmed unsure incorporate margins error returned tidycensus, opting simply drop critical information analysis. (See vignette(\"coefficients--variation\") urbnindicators provides analysts quick actionable characterizations margins error.)","code":"library(urbnindicators) library(tidycensus) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(stringr) library(ggplot2)  acs_codebook = load_variables(dataset = \"acs5\", year = 2022) # acs_codebook %>% View() # not run acs_codebook %>% nrow() #> [1] 28152 acs_codebook %>%   dplyr::filter(stringr::str_detect(concept, \"Disability\")) %>%   nrow()  #> [1] 506 df_disability = get_acs(   geography = \"county\",   state = \"NJ\",    year = 2022,   output = \"wide\",   survey = \"acs5\",   table = \"B18101\") #> Getting data from the 2018-2022 5-year ACS #> Warning: • You have not set a Census API key. Users without a key are limited to 500 #> queries per day and may experience performance limitations. #> ℹ For best results, get a Census API key at #> http://api.census.gov/data/key_signup.html and then supply the key to the #> `census_api_key()` function to use it throughout your tidycensus session. #> This warning is displayed once per session. #> Loading ACS5 variables for 2022 from table B18101. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.  df_disability %>% dim() #> [1] 21 80  df_disability %>% head() #> # A tibble: 6 × 80 #>   GEOID NAME         B18101_001E B18101_001M B18101_002E B18101_002M B18101_003E #>   <chr> <chr>              <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 34001 Atlantic Co…      271937         230      132458         296        7402 #> 2 34003 Bergen Coun…      947568         239      464867         296       24887 #> 3 34005 Burlington …      447132         632      216373         598       11988 #> 4 34007 Camden Coun…      517354         252      250521         302       15839 #> 5 34009 Cape May Co…       93727         214       45316         259        1928 #> 6 34011 Cumberland …      143979         325       69870         409        4844 #> # ℹ 73 more variables: B18101_003M <dbl>, B18101_004E <dbl>, B18101_004M <dbl>, #> #   B18101_005E <dbl>, B18101_005M <dbl>, B18101_006E <dbl>, B18101_006M <dbl>, #> #   B18101_007E <dbl>, B18101_007M <dbl>, B18101_008E <dbl>, B18101_008M <dbl>, #> #   B18101_009E <dbl>, B18101_009M <dbl>, B18101_010E <dbl>, B18101_010M <dbl>, #> #   B18101_011E <dbl>, B18101_011M <dbl>, B18101_012E <dbl>, B18101_012M <dbl>, #> #   B18101_013E <dbl>, B18101_013M <dbl>, B18101_014E <dbl>, B18101_014M <dbl>, #> #   B18101_015E <dbl>, B18101_015M <dbl>, B18101_016E <dbl>, …"},{"path":"https://ui-research.github.io/urbnindicators/articles/urbnindicators.html","id":"enter-urbnindicators","dir":"Articles","previous_headings":"","what":"Enter urbnindicators","title":"urbnindicators","text":"urbnindicators abstracts workflow behind scenes. lieu call tidycensus::get_acs(), call urbnindicators::compile_acs_data() returns comprehensive dataframe raw ACS measures derived estimates (share individuals disabled). call returns us 21 observations (one per county NJ), returns us 1,300 columns. Woah. Even subset matching “disability”, still 79 columns (columns available tidycensus::get_acs() call, plus one). urbnindicators makes tidycensus::get_acs() query illustrated . Indeed, 80 columns returned via workflow intimidating, 1,300 columns likely… intimidating. reflects design choice underlying urbnindicators–package returns large datasets, structures analysts can use simple familiar approaches navigating data, benefiting diverse array measures single dataset. primary differences urbnindicators tidycensus outputs returned columns descriptive names (e.g., sex_by_age_by_disability_status_female_75_years_over_with_a_disability), –importantly–derived variables included: Indeed, string-matching approach used , pattern select(matches(\"variable_of_interest.*percent$\")), key navigating 1,300 variables returned urbnindicators::compile_acs_data(). variables named semantically (.e., names meaning simply default alphanumeric variable codes), derived percent variables always end percent, flexible pattern can identify standardized measures ready analysis. (reminder: \".*\" matches unlimited number characters, \"$\" matches end string. select(matches(\"variable_of_interest.*percent$\")) says: match columns names containing “variable_of_interest”, followed number characters, end “percent”). look derived percent variables: urbnindicators::compile_acs_data() also returns codebook attribute returned dataframe. Want know cost_burdened_30percentormore_incomeslessthan35000_percent calculated, universe measure ? problem:","code":"df_urbnindicators = urbnindicators::compile_acs_data(   variables = NULL,   years = 2022,   geography = \"county\",   states = \"NJ\",   retain_moes = T) #> Warning in urbnindicators::compile_acs_data(variables = NULL, years = 2022, : Variable names and geographies for ACS data products can change between years. #> Changes to geographies are particularly significant across decades #> (e.g., from 2019 to 2020), but these changes can occur in any year. #> Users should ensure that the logic embedded in this function-- #> which was developed around five-year ACS estimates for 2017-2021-- #> remains accurate for their use cases. Evaluation of measures and #> geographies over time should be thoroughly quality checked. #>   |                                                                              |                                                                      |   0%  |                                                                              |                                                                      |   1%  |                                                                              |=                                                                     |   1%  |                                                                              |=                                                                     |   2%  |                                                                              |==                                                                    |   2%  |                                                                              |==                                                                    |   3%  |                                                                              |==                                                                    |   4%  |                                                                              |===                                                                   |   4%  |                                                                              |===                                                                   |   5%  |                                                                              |====                                                                  |   5%  |                                                                              |====                                                                  |   6%  |                                                                              |=====                                                                 |   7%  |                                                                              |=====                                                                 |   8%  |                                                                              |======                                                                |   8%  |                                                                              |======                                                                |   9%  |                                                                              |=======                                                               |   9%  |                                                                              |=======                                                               |  10%  |                                                                              |========                                                              |  11%  |                                                                              |========                                                              |  12%  |                                                                              |=========                                                             |  13%  |                                                                              |==========                                                            |  14%  |                                                                              |==========                                                            |  15%  |                                                                              |===========                                                           |  15%  |                                                                              |===========                                                           |  16%  |                                                                              |============                                                          |  17%  |                                                                              |============                                                          |  18%  |                                                                              |=============                                                         |  18%  |                                                                              |=============                                                         |  19%  |                                                                              |==============                                                        |  20%  |                                                                              |===============                                                       |  21%  |                                                                              |===============                                                       |  22%  |                                                                              |================                                                      |  22%  |                                                                              |=================                                                     |  24%  |                                                                              |=================                                                     |  25%  |                                                                              |==================                                                    |  26%  |                                                                              |===================                                                   |  26%  |                                                                              |===================                                                   |  27%  |                                                                              |=====================                                                 |  30%  |                                                                              |======================                                                |  31%  |                                                                              |=======================                                               |  33%  |                                                                              |=========================                                             |  35%  |                                                                              |=========================                                             |  36%  |                                                                              |==========================                                            |  36%  |                                                                              |==========================                                            |  37%  |                                                                              |===============================                                       |  44%  |                                                                              |====================================                                  |  52%  |                                                                              |=========================================                             |  59%  |                                                                              |==========================================                            |  61%  |                                                                              |================================================                      |  68%  |                                                                              |====================================================                  |  75%  |                                                                              |=========================================================             |  81%  |                                                                              |==========================================================            |  83%  |                                                                              |=============================================================         |  88%  |                                                                              |===============================================================       |  90%  |                                                                              |====================================================================  |  97%  |                                                                              |===================================================================== |  98%  |                                                                              |======================================================================| 100% #> Getting data from the 2018-2022 5-year ACS #> Warning in generate_codebook(variables = colnames(df_calculated_estimates), : 63 variable(s) in the codebook are missing information. #> Run [codebook] %>% filter(is.na(definition)) to identify missingness.  df_urbnindicators %>% dim() #> [1]   21 1325 df_urbnindicators %>%   dplyr::select(dplyr::matches(\"disability\")) %>%    colnames() %>%    length() ## 79 #> [1] 79 df_urbnindicators %>%   dplyr::select(GEOID, matches(\"disability.*percent\")) #> # A tibble: 21 × 2 #>    GEOID disability_percent #>    <chr>              <dbl> #>  1 34001             0.142  #>  2 34003             0.0831 #>  3 34005             0.116  #>  4 34007             0.145  #>  5 34009             0.150  #>  6 34011             0.148  #>  7 34013             0.117  #>  8 34015             0.127  #>  9 34017             0.0865 #> 10 34019             0.0876 #> # ℹ 11 more rows df_urbnindicators %>%   dplyr::select(dplyr::matches(\"percent$\")) %>%   colnames() %>% # 230+   sort() %>%   head(10) # but we'll just take a look at a few for now #>  [1] \"ability_speak_english_less_than_very_well_percent\" #>  [2] \"ability_speak_english_very_well_better_percent\"    #>  [3] \"age_10_14_years_percent\"                           #>  [4] \"age_15_17_years_percent\"                           #>  [5] \"age_18_19_years_percent\"                           #>  [6] \"age_20_years_percent\"                              #>  [7] \"age_21_years_percent\"                              #>  [8] \"age_22_24_years_percent\"                           #>  [9] \"age_25_29_years_percent\"                           #> [10] \"age_30_34_years_percent\" ## NOTE: this functionality is not (yet) incorporated into the package! # df_urbnindicators %>% #   attr(\"codebook\")"},{"path":"https://ui-research.github.io/urbnindicators/articles/urbnindicators.html","id":"so-why-urbnindicators","dir":"Articles","previous_headings":"","what":"So Why urbnindicators?","title":"urbnindicators","text":"Good question. Hopefully process illustrated advantages, recap, see two sets advantages. urbnindicators saves time : Making sensible decisions variable table selection; Calculating common measures (typically percentages) behind scenes. illustrated , urbnindicators also allows multi-year multi-geography queries default, whereas tidycensus support approaches (support multi-geography queries geographic levels tidycensus; urbnindicators extends geographies), instead users loop desired years geographies. urbnindicators improves reliability data query measure creation process : Replacing alphanumeric variable codes (e.g., B18101_001 meaningful variable names (e.g., disability_percent); Returning codebook attached primary dataframe documents variables created represent; Running default data quality checks generated measures (plus lots baked-quality checks underlying package code developed tested); Producing ---box summaries measure reliability via urbnindicators::calculate_coefficient_of_variation(), leverages margins error associated measure assess quality estimates across queried geographies. (See vignette(\"coefficients--variation\") .)","code":""},{"path":"https://ui-research.github.io/urbnindicators/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Curran-Groome. Author, maintainer.","code":""},{"path":"https://ui-research.github.io/urbnindicators/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Curran-Groome W (2024). urbnindicators: Box Social Science Indicators American Community Survey (ACS). R package version 0.0.0.9003, https://ui-research.github.io/urbnindicators/.","code":"@Manual{,   title = {urbnindicators: Out of the Box Social Science Indicators from the American Community Survey (ACS)},   author = {Will Curran-Groome},   year = {2024},   note = {R package version 0.0.0.9003},   url = {https://ui-research.github.io/urbnindicators/}, }"},{"path":"https://ui-research.github.io/urbnindicators/index.html","id":"urbnindicators","dir":"","previous_headings":"","what":"Out of the Box Social Science Indicators from the American Community Survey (ACS)","title":"Out of the Box Social Science Indicators from the American Community Survey (ACS)","text":"goal urbnindicators provide users simple interface generate ready--analysis dataset common social sciences measures. built top tidycensus package abstracts common query cleaning tasks–identifying required variable codes pass tidycensus::get_acs(), calculating percentages measures interest derived count estimates, renaming variables semantically-meaningful (still programmatically functional). addition simplicity, includes series data quality checks help ensure measures accurately computed provide users quantifications measures’ reliability (using coefficients variation) rather merely returning margins error (often immediately dropped analysis workflows without consideration. (aspirational) urbnindicators also provides set related tools facilitate common tasks working Census data (ACS data particular), calculating calculating measures segregation, interpolating data across geographies time, providing change--time measures.","code":""},{"path":"https://ui-research.github.io/urbnindicators/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Out of the Box Social Science Indicators from the American Community Survey (ACS)","text":"Install development version urbnindicators GitHub : package active development frequent updates–check ensure recent version installed!","code":"# install.packages(\"devtools\") devtools::install_github(\"UI-Research/urbnindicators\")"},{"path":"https://ui-research.github.io/urbnindicators/index.html","id":"urbnindicators-in-action","dir":"","previous_headings":"","what":"urbnindicators in action","title":"Out of the Box Social Science Indicators from the American Community Survey (ACS)","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(stringr) library(urbnindicators) library(ggplot2)  acs_df = compile_acs_data(   variables = NULL,   years = c(2021, 2022),   geography = \"county\",   states = \"NJ\",   counties = NULL,   retain_moes = TRUE) #> Getting data from the 2017-2021 5-year ACS #> Getting data from the 2018-2022 5-year ACS  acs_df %>%    select(NAME, data_source_year, race_personofcolor_percent) %>%   mutate(county_name = NAME %>% str_remove(\" County, New Jersey\")) %>%   ggplot(aes(     x = reorder(county_name, race_personofcolor_percent),      y = race_personofcolor_percent,      color = factor(data_source_year))) +     geom_point() +     labs(       title = \"Change in NJ Counties' Populations of Color, 2021 to 2022\",       x = \"County\",        y = \"Share of population who are people of color\",       color = \"Year\") +     scale_y_continuous(       breaks = c(0, .25, .50, .75, 1.0),       labels = scales::percent) +     coord_flip() +     theme_minimal() +     theme(       axis.title = element_text(size = 9, face = \"italic\"),       plot.title = element_text(size = 11, face = \"bold\"),       panel.grid.minor = element_blank(),       panel.grid.major.x = element_blank(),       legend.title = element_text(size = 9, face = \"bold\"),       legend.text = element_text(size = 8))"},{"path":"https://ui-research.github.io/urbnindicators/reference/calculate_segregation_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate segregation at multiple geographies — calculate_segregation_metrics","title":"Calculate segregation at multiple geographies — calculate_segregation_metrics","text":"Calculate multi-group segregation metrics using Mutual Information Index (M)","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/calculate_segregation_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate segregation at multiple geographies — calculate_segregation_metrics","text":"","code":"calculate_segregation_metrics(   data,   data_format,   nesting_geography_geoid_length )"},{"path":"https://ui-research.github.io/urbnindicators/reference/calculate_segregation_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate segregation at multiple geographies — calculate_segregation_metrics","text":"data dataframe containing `GEOID` column required input measures, e.g., race income, single geography (e.g., tract). `GEOID` column must character column, `GEOID` must unique. data formatted wide, must least two columns addition `GEOID`. data formatted long, must single columd addition `GEOID`. inputted data contain measures.example: tibble::tribble(     ~GEOID, ~race_nonhispanic_white_alone, ~race_nonhispanic_black_alone,     \"37001020100\", 2835, 1035,     \"37001020200\", 1205, 1321) data_format Describe structure inputted data. One \"wide\" \"long\". Data returned format passed function. nesting_geography_geoid_length length `GEOID` identifies nesting geographies. example, smaller_geography_data defined tract level (GEOID length 11), `nesting_geography_geoid_length = 5` return segregation metrics counties (GEOID length 5) tracts (relative tracts within county).","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/calculate_segregation_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate segregation at multiple geographies — calculate_segregation_metrics","text":"dataframe comprising segregation estimates associated p-values    geographic levels.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/calculate_segregation_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate segregation at multiple geographies — calculate_segregation_metrics","text":"Given data smaller geography (e.g., tract), `calculate_segregation_metrics()`    returns Mutual Information Index (M) values associated p-values perfectly    nested larger geography (e.g., county state) well decomposed values    smaller geography (e.g., tract). Note segregation calculations rely `segregation`    users refer package https://github.com/elbersb/segregation    implementation details.","code":""},{"path":[]},{"path":"https://ui-research.github.io/urbnindicators/reference/calculate_segregation_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate segregation at multiple geographies — calculate_segregation_metrics","text":"","code":"if (FALSE) { variables = c(   race_nonhispanic_white_alone_ = \"B03002_003\",   race_nonhispanic_black_alone_ = \"B03002_004\",   race_nonhispanic_native_alone_ = \"B03002_005\",   race_nonhispanic_asian_alone_ = \"B03002_006\",   race_nonhispanic_nhpi_alone_ = \"B03002_007\") df_long = tidycensus::get_acs(   geography = \"tract\",   state = \"SC\",   variables = variables,   output = \"tidy\") %>%   # can only include a GEOID column and segregation-related measures   dplyr::select(-c(NAME, matches(\"_M$\"))) calculate_segregation_metrics(   data = df_long,   data_format = \"long\",   nesting_geography_geoid_length = 5) }"},{"path":"https://ui-research.github.io/urbnindicators/reference/compile_acs_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis-ready social science measures — compile_acs_data","title":"Analysis-ready social science measures — compile_acs_data","text":"`compile_acs_data()` constructs measures frequently used social sciences    research leveraging [tidycensus::get_acs()] acquire raw estimates    Census Bureau API.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/compile_acs_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis-ready social science measures — compile_acs_data","text":"","code":"compile_acs_data(   variables = NULL,   years = c(2022),   geography = \"county\",   states = NULL,   counties = NULL,   retain_moes = TRUE,   spatial = FALSE )"},{"path":"https://ui-research.github.io/urbnindicators/reference/compile_acs_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis-ready social science measures — compile_acs_data","text":"variables named vector ACS variables returned [urbnindicators::list_acs_variables()]. years character vector (coercible ) comprising one four-digit years pull five-year American Community Survey estimates. geography geography type accepted [tidycensus::get_acs()], e.g., \"tract\", \"county\", \"state\", among others. Geographis tract level supported. states vector one state names, abbreviations, codes accepted [tidycensus::get_acs()]. counties vector one county names, abbreviations, codes accepted [tidycensus::get_acs()]. NOTE: parameter currently supported must set NULL (default). retain_moes Boolean. Include margins error (MOE) returned dataframe, omit ? spatial Boolean. Return simple features (sf), spatially-enabled dataframe?","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/compile_acs_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis-ready social science measures — compile_acs_data","text":"dataframe containing requested `variables`, MOEs (optionally),    series derived variables, percentages, year data.    Returned data formatted wide. codebook generated `generate_codebook()`    attached can accessed via `compile_acs_data()","code":""},{"path":[]},{"path":"https://ui-research.github.io/urbnindicators/reference/compile_acs_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analysis-ready social science measures — compile_acs_data","text":"","code":"if (FALSE) { acs_variables = list_acs_variables(year = \"2022\") df = compile_acs_data(   variables = acs_variables,   years = c(2021, 2022),   geography = \"county\",   states = \"NJ\",   counties = NULL,   retain_moes = TRUE,   spatial = FALSE)   }"},{"path":"https://ui-research.github.io/urbnindicators/reference/filter_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily filter ACS variables — filter_variables","title":"Easily filter ACS variables — filter_variables","text":"Filter results [select_variables()] based `match_type` relative `match_string`.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/filter_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily filter ACS variables — filter_variables","text":"","code":"filter_variables(variable_vector, match_string, match_type = \"positive\")"},{"path":"https://ui-research.github.io/urbnindicators/reference/filter_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily filter ACS variables — filter_variables","text":"variable_vector named vector (intended use named ACS variables). match_string string filter (filter) elements `variable_vector`. match_type Whether include (`match_type = \"positive\"`) exclude (`match_type = \"negative\"`) matching elements.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/filter_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easily filter ACS variables — filter_variables","text":"elements `variable_vector` /match `match_string`.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/filter_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily filter ACS variables — filter_variables","text":"","code":"if (FALSE) { codebook = tidycensus::load_variables(dataset = \"acs5\", year = 2022) selected_variables = select_variables_by_name(\"B16005_\", census_codebook = codebook) filter_variables(   variable_vector = selected_variables,   match_string = \"universe_$|native_$|foreign_born_$|only|very_well\",   match_type = \"positive\") }"},{"path":"https://ui-research.github.io/urbnindicators/reference/generate_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"Document variables from [compile_acs_data()] — generate_codebook","title":"Document variables from [compile_acs_data()] — generate_codebook","text":"`generate_codebook()` returns codebook variables returned `compile_acs_data()`.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/generate_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Document variables from [compile_acs_data()] — generate_codebook","text":"","code":"generate_codebook(variables = NULL, years = NULL)"},{"path":"https://ui-research.github.io/urbnindicators/reference/generate_codebook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Document variables from [compile_acs_data()] — generate_codebook","text":"variables vector column names. Column names generated `compile_acs_data()` returned codebook missing definitions. years character vector (coercible ) comprising one four-digit years pull variable definitions.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/generate_codebook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Document variables from [compile_acs_data()] — generate_codebook","text":"tibble containing names definitions  variables passed `variables`. variables different definitions across years, variable reflected codebook. variable consistent definition across years, represented . Column names passed `variables` generated `compile_acs_data()` returned codebook missing definitions.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/generate_codebook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Document variables from [compile_acs_data()] — generate_codebook","text":"Generates tibble variable names definitions describe variable created. `generate_codebook()` called behind scenes part `compile_acs_data()` resulting codebook attached attribute output; can accessed via `compile_acs_data()","code":""},{"path":[]},{"path":"https://ui-research.github.io/urbnindicators/reference/generate_codebook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Document variables from [compile_acs_data()] — generate_codebook","text":"","code":"df = compile_acs_data(   variables = list_acs_variables(year = 2022),   years = c(2022),   geography = \"county\",   states = \"NJ\",   counties = NULL,   retain_moes = TRUE,   spatial = FALSE) #> Warning: Variable names and geographies for ACS data products can change between years. #> Changes to geographies are particularly significant across decades #> (e.g., from 2019 to 2020), but these changes can occur in any year. #> Users should ensure that the logic embedded in this function-- #> which was developed around five-year ACS estimates for 2017-2021-- #> remains accurate for their use cases. Evaluation of measures and #> geographies over time should be thoroughly quality checked. #>    |                                                                               |                                                                      |   0%   |                                                                               |                                                                      |   1%   |                                                                               |=                                                                     |   1%   |                                                                               |=                                                                     |   2%   |                                                                               |==                                                                    |   2%   |                                                                               |==                                                                    |   3%   |                                                                               |==                                                                    |   4%   |                                                                               |===                                                                   |   4%   |                                                                               |===                                                                   |   5%   |                                                                               |====                                                                  |   5%   |                                                                               |====                                                                  |   6%   |                                                                               |=====                                                                 |   6%   |                                                                               |=====                                                                 |   7%   |                                                                               |=====                                                                 |   8%   |                                                                               |======                                                                |   8%   |                                                                               |======                                                                |   9%   |                                                                               |=======                                                               |  10%   |                                                                               |=======                                                               |  11%   |                                                                               |========                                                              |  11%   |                                                                               |========                                                              |  12%   |                                                                               |=========                                                             |  12%   |                                                                               |=========                                                             |  13%   |                                                                               |==========                                                            |  14%   |                                                                               |===========                                                           |  15%   |                                                                               |=============                                                         |  18%   |                                                                               |=============                                                         |  19%   |                                                                               |==============                                                        |  19%   |                                                                               |==============                                                        |  20%   |                                                                               |================                                                      |  22%   |                                                                               |=====================                                                 |  30%   |                                                                               |======================                                                |  31%   |                                                                               |========================                                              |  34%   |                                                                               |=========================                                             |  36%   |                                                                               |=============================                                         |  41%   |                                                                               |==================================                                    |  49%   |                                                                               |=======================================                               |  56%   |                                                                               |============================================                          |  63%   |                                                                               |=================================================                     |  71%   |                                                                               |=======================================================               |  78%   |                                                                               |============================================================          |  85%   |                                                                               |=================================================================     |  93%   |                                                                               |======================================================================| 100% #> Getting data from the 2018-2022 5-year ACS #> Warning: • You have not set a Census API key. Users without a key are limited to 500 #> queries per day and may experience performance limitations. #> ℹ For best results, get a Census API key at #> http://api.census.gov/data/key_signup.html and then supply the key to the #> `census_api_key()` function to use it throughout your tidycensus session. #> This warning is displayed once per session. #> Warning: 63 variable(s) in the codebook are missing information. #> Run [codebook] %>% filter(is.na(definition)) to identify missingness. codebook = generate_codebook(   variables = colnames(df %>% dplyr::select(-matches(\"percent\"))),   years = c(2022)) #> Warning: 33 variable(s) in the codebook are missing information. #> Run [codebook] %>% filter(is.na(definition)) to identify missingness."},{"path":"https://ui-research.github.io/urbnindicators/reference/list_acs_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Return ACS variables codes and names — list_acs_variables","title":"Return ACS variables codes and names — list_acs_variables","text":"Generate meaningful names ACS variable codes based metadata    return vector, along semantic names. Intended    use [compile_acs_data()].","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/list_acs_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return ACS variables codes and names — list_acs_variables","text":"","code":"list_acs_variables(year = \"2022\")"},{"path":"https://ui-research.github.io/urbnindicators/reference/list_acs_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return ACS variables codes and names — list_acs_variables","text":"year year variable names selected.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/list_acs_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return ACS variables codes and names — list_acs_variables","text":"named vector variable codes (specified Census Bureau's API)    semantically-meaningful names (e.g., \"race_black_alone_nonhispanic\").","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/list_acs_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return ACS variables codes and names — list_acs_variables","text":"","code":"list_acs_variables(year = \"2022\") %>% head() #>               total_population_universe_  #>                             \"B01003_001\"  #>              public_assistance_universe_  #>                             \"B19058_001\"  #>              public_assistance_received_  #>                             \"B19058_002\"  #>                           snap_universe_  #>                             \"B22003_001\"  #>                           snap_received_  #>                             \"B22003_002\"  #> household_income_quintile_upper_limit_1_  #>                             \"B19080_001\""},{"path":"https://ui-research.github.io/urbnindicators/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ui-research.github.io/urbnindicators/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/safe_divide.html","id":null,"dir":"Reference","previous_headings":"","what":"Division without NAs — safe_divide","title":"Division without NAs — safe_divide","text":"`safe_divide()` returns 0 divisor 0.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/safe_divide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Division without NAs — safe_divide","text":"","code":"safe_divide(x, y)"},{"path":"https://ui-research.github.io/urbnindicators/reference/safe_divide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Division without NAs — safe_divide","text":"x numeric scalar. y numeric scalar.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/safe_divide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Division without NAs — safe_divide","text":"traditional dividend cases except `y` == 0,    case returns 0.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/safe_divide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Division without NAs — safe_divide","text":"modified division operation returns zero divisor zero    rather returning NA. Otherwise returns quotient.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/safe_divide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Division without NAs — safe_divide","text":"","code":"safe_divide(1, 2) #> [1] 0.5 safe_divide(3, 0) #> [1] 0"},{"path":"https://ui-research.github.io/urbnindicators/reference/select_variables_by_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily rename ACS variables — select_variables_by_name","title":"Easily rename ACS variables — select_variables_by_name","text":"Given name ACS variable (string matches one variables), generate named character vector original variable names meaningful names.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/select_variables_by_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily rename ACS variables — select_variables_by_name","text":"","code":"select_variables_by_name(variable_name, census_codebook)"},{"path":"https://ui-research.github.io/urbnindicators/reference/select_variables_by_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily rename ACS variables — select_variables_by_name","text":"variable_name named vector (intended use named ACS variables). census_codebook object returned [tidycensus::load_variables()].","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/select_variables_by_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easily rename ACS variables — select_variables_by_name","text":"named character vector containing variables matched    `variable_name` `census_codebook`, semantically-meaningful names    derived metadata fields contained `census_codebook`.","code":""},{"path":"https://ui-research.github.io/urbnindicators/reference/select_variables_by_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily rename ACS variables — select_variables_by_name","text":"","code":"if (FALSE) { codebook = tidycensus::load_variables(dataset = \"acs5\", year = 2022) select_variables_by_name(\"B16005_\", census_codebook = codebook) }"}]
